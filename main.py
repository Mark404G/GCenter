import tkinter as tk
from tkinter import messagebox, simpledialog, ttk
import json
import os
from datetime import datetime

class GameCenter:
    def __init__(self, root):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞"""
        self.root = root
        self.root.title("GCenter")
        self.root.geometry("600x650")
        
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
        self.RATING_PER_GAME = 1.25  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞ –æ–¥–Ω—É –∏–≥—Ä—É (1.25 –¥–ª—è 4 –∏–≥—Ä)
        self.GAME_NAMES = ["snake", "balls", "letters", "digits"]  # –°–ø–∏—Å–æ–∫ –∏–≥—Ä
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∫–æ–Ω–∫—É
        try:
            self.root.iconbitmap("GC.ico")  # –î–ª—è Windows
        except:
            try:
                icon = tk.PhotoImage(file="GC.ico")
                self.root.iconphoto(False, icon)
            except:
                pass  # –ï—Å–ª–∏ –∏–∫–æ–Ω–∫–∞ –≤–æ–æ–±—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.current_user = None  # –¢–µ–∫—É—â–∏–π –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        self.data_dir = "data"  # –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.accounts_dir = os.path.join(self.data_dir, "accounts")  # –ü–∞–ø–∫–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        self.logs_file = os.path.join(self.data_dir, "logs.json")  # –§–∞–π–ª —Å –ª–æ–≥–∞–º–∏ –∏–≥—Ä
        os.makedirs(self.accounts_dir, exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–æ–≤
        self.game_logs = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä
        self.load_logs()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–∏ –∏–∑ —Ñ–∞–π–ª–∞
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.create_auth_interface()

    def load_logs(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.logs_file):
                with open(self.logs_file, 'r', encoding='utf-8') as f:
                    self.game_logs = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            self.game_logs = []

    def create_auth_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        self.clear_window()
        
        auth_frame = tk.Frame(self.root)
        auth_frame.pack(pady=100, padx=50, fill=tk.BOTH, expand=True)
        
        tk.Label(
            auth_frame, 
            text="–ü—Ä–∏–≤–µ—ÇüñêÔ∏è\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è",
            font=('Arial', 14)
        ).pack(pady=150)
        
        btn_frame = tk.Frame(auth_frame)
        btn_frame.pack(pady=20)
        
        tk.Button(
            btn_frame, 
            text="üë§ –í–æ–π—Ç–∏", 
            command=self.login_user,
            width=15,
            height=2,
            font=('Arial', 12)
        ).pack(side=tk.LEFT, padx=10)
        
        tk.Button(
            btn_frame, 
            text="‚ú® –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", 
            command=self.create_user,
            width=15,
            height=2,
            font=('Arial', 12)
        ).pack(side=tk.LEFT, padx=10)

    def create_main_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.clear_window()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—Ä–µ–π–º—ã
        self.top_frame = tk.Frame(self.root)
        self.top_frame.pack(pady=10, fill=tk.BOTH, expand=True)
        
        self.middle_frame = tk.Frame(self.root)
        self.middle_frame.pack(pady=5, fill=tk.BOTH, expand=True)
        
        self.bottom_frame = tk.Frame(self.root)
        self.bottom_frame.pack(pady=10, fill=tk.X)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤
        tk.Label(self.top_frame, text="üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", font=('Arial', 14, 'bold')).pack()
        
        self.top_tree = ttk.Treeview(self.top_frame, height=6)
        self.top_tree['columns'] = ('Rating', 'Snake', 'Balls', 'Letters', 'Digits')
        self.top_tree.column('#0', width=100, anchor='w')
        self.top_tree.column('Rating', width=80, anchor='center')
        self.top_tree.column('Snake', width=80, anchor='center')
        self.top_tree.column('Balls', width=80, anchor='center')
        self.top_tree.column('Letters', width=80, anchor='center')
        self.top_tree.column('Digits', width=80, anchor='center')
        
        self.top_tree.heading('#0', text='–ò–≥—Ä–æ–∫')
        self.top_tree.heading('Rating', text='–†–µ–π—Ç–∏–Ω–≥')
        self.top_tree.heading('Snake', text='Snake')
        self.top_tree.heading('Balls', text='Balls')
        self.top_tree.heading('Letters', text='Letters')
        self.top_tree.heading('Digits', text='Digits')
        
        self.top_tree.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        logs_frame = tk.Frame(self.middle_frame)
        logs_frame.pack(fill=tk.BOTH, expand=True)
        
        tk.Label(logs_frame, text="üïí –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä", font=('Arial', 12)).pack()
        
        # –°–æ–∑–¥–∞–µ–º Scrollbar –∏ Text –¥–ª—è –ª–æ–≥–æ–≤
        scrollbar = tk.Scrollbar(logs_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.logs_text = tk.Text(
            logs_frame, 
            height=10, 
            state='disabled', 
            font=('Arial', 10),
            yscrollcommand=scrollbar.set
        )
        self.logs_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        scrollbar.config(command=self.logs_text.yview)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        self.user_frame = tk.Frame(self.bottom_frame)
        self.user_frame.pack(pady=5)
        self.user_label = tk.Label(self.user_frame, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.current_user}", font=('Arial', 12))
        self.user_label.pack()
        
        # –ö–Ω–æ–ø–∫–∏ –∏–≥—Ä
        self.games_frame = tk.Frame(self.bottom_frame)
        self.games_frame.pack()
        
        games = [
            ("Snake", "snake"),
            ("Balls", "balls"),
            ("Letters", "letters"),
            ("Digits", "digits")
        ]
        
        for name, game_id in games:
            btn = tk.Button(
                self.games_frame, 
                text=name, 
                command=lambda g=game_id: self.start_game(g),
                width=12, 
                height=2
            )
            btn.pack(side=tk.LEFT, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        tk.Button(
            self.bottom_frame,
            text="–í—ã–π—Ç–∏",
            command=self.logout,
            width=12,
            height=2
        ).pack(pady=10)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        self.update_logs_display()
        self.update_top_players()

    def start_game(self, game_name):
        """–ó–∞–ø—É—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã"""
        if not self.current_user:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –∏–≥—Ä—ã
        game_window = tk.Toplevel(self.root)
        game_window.protocol("WM_DELETE_WINDOW", lambda: self.on_game_close(game_window))

        # –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –æ–∫–æ–Ω —Å –∏–≥—Ä–∞–º–∏
        try:
            game_window.iconbitmap("GameCenter.ico")  # –î–ª—è Windows
        except:
            try:
                icon = tk.PhotoImage(file="GameCenter.ico")
                game_window.iconphoto(False, icon)
            except:
                pass
        
        def universal_callback(score):
            """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã"""
            if score is not None:
                self.update_score(game_name, score)
                self.update_top_players()
                self.add_game_log(game_name, score)
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
            game_window.after(100, lambda: self.final_close(game_window))
        
        # –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        self.root.iconify()
        
        try:
            if game_name == "snake":
                from games.snake import Snake
                Snake(game_window, universal_callback)
                
            elif game_name == "balls":
                from games.balls import Balls
                Balls(game_window, universal_callback)
                
            elif game_name == "letters":
                from games.letters import Letters
                Letters(game_window, universal_callback)
                
            elif game_name == "digits":
                from games.digits import Digits
                Digits(game_window, universal_callback)
                
        except ImportError as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É: {e}")
            self.root.deiconify()

    def final_close(self, game_window):
        """–§–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –∏–≥—Ä—ã"""
        if game_window.winfo_exists():
            game_window.destroy()
        self.root.deiconify()

    def on_game_close(self, game_window):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –∏–≥—Ä—ã"""
        self.final_close(game_window)

    def add_game_log(self, game_name, score):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä"""
        log_entry = {
            "date": datetime.now().strftime("%d.%m.%Y %H:%M:%S"), 
            "player": self.current_user,
            "game": game_name.capitalize(),
            "score": score
        }
        self.game_logs.append(log_entry)
        self.save_logs()
        self.update_logs_display()

    def save_logs(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä"""
        try:
            with open(self.logs_file, 'w', encoding='utf-8') as f:
                json.dump(self.game_logs[-100:], f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")

    def update_logs_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π"""
        self.logs_text.config(state='normal')
        self.logs_text.delete(1.0, tk.END)
        
        try:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏ –ø–æ –ø–æ–ª–Ω–æ–π –¥–∞—Ç–µ (—Å –≥–æ–¥–æ–º)
            sorted_logs = sorted(
                self.game_logs,
                key=lambda x: datetime.strptime(x['date'], "%d.%m.%Y %H:%M:%S"),
                reverse=True
            )
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –±–µ–∑ –≥–æ–¥–∞ (–∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ)
            for log in sorted_logs:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–µ–Ω—å, –º–µ—Å—è—Ü –∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                self.logs_text.insert(
                    tk.END,
                    f"{log['date']} ({log.get('player', 'unknown')}) "
                    f"{log.get('game', 'Unknown')}: {log.get('score', '?')}\n"
                )
                
        except (KeyError, ValueError) as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ–≥–æ–≤: {e}")
            # –§–æ–ª–±—ç–∫: –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞—Ç–∞–º–∏
            for log in reversed(self.game_logs[-20:]):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π
                self.logs_text.insert(
                    tk.END,
                    f"{log.get('date', '??.?? ??:??:??')} ({log.get('player', 'unknown')}) "
                    f"{log.get('game', 'Unknown')}: {log.get('score', '?')}\n"
                )
        
        self.logs_text.config(state='disabled')
        self.logs_text.yview_moveto(0)  # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–∞—á–∞–ª—É

    def calculate_player_ratings(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä"""
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–æ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–∞—Ö
        players_data = {}
        for filename in os.listdir(self.accounts_dir):
            if filename.endswith('.json'):
                with open(os.path.join(self.accounts_dir, filename), 'r', encoding='utf-8') as f:
                    account = json.load(f)
                    username = account["username"]
                    games_data = account["games"]
                    
                    players_data[username] = {
                        "scores": {
                            "snake": games_data["snake"]["high_score"],
                            "balls": games_data["balls"]["high_score"],
                            "letters": games_data["letters"]["high_score"],
                            "digits": games_data["digits"]["high_score"]
                        }
                    }
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
        if not players_data:
            return {}
        
        # –î–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤ –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        for game in self.GAME_NAMES:
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–≥—Ä–∞–ª–∏ –≤ —ç—Ç—É –∏–≥—Ä—É (–¥–∞–∂–µ —Å 0 –æ—á–∫–∞–º–∏)
            game_scores = [(player, data["scores"][game]) for player, data in players_data.items()]
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—á–∫–æ–≤
            sorted_scores = sorted(game_scores, key=lambda x: (-x[1], x[0]))
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ
            num_players = len(sorted_scores)
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
            for i, (player, score) in enumerate(sorted_scores):
                if num_players == 1:
                    # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ–¥–∏–Ω, –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
                    rating = self.RATING_PER_GAME
                else:
                    # –õ–∏–Ω–µ–π–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –æ—Ç max –¥–æ 0
                    rating = self.RATING_PER_GAME * (1 - i / (num_players - 1))
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
                if "ratings" not in players_data[player]:
                    players_data[player]["ratings"] = {}
                players_data[player]["ratings"][game] = rating
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        for player, data in players_data.items():
            total_rating = sum(data.get("ratings", {}).values())
            players_data[player]["total_rating"] = total_rating
        
        return players_data

    def update_top_players(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π —Ä–µ–π—Ç–∏–Ω–≥–∞"""
        for item in self.top_tree.get_children():
            self.top_tree.delete(item)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
        players_data = self.calculate_player_ratings()
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ–±—â–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        sorted_players = sorted(players_data.items(),
                              key=lambda x: -x[1]['total_rating'])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É
        for player, data in sorted_players[:10]:  # –¢–æ–ª—å–∫–æ —Ç–æ–ø-10
            scores = data['scores']
            self.top_tree.insert('', 'end', text=player, values=(
                f"{data['total_rating']:.2f}",  # –†–µ–π—Ç–∏–Ω–≥ —Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –¥–æ —Å–æ—Ç—ã—Ö
                scores["snake"],
                scores["balls"],
                scores["letters"],
                scores["digits"]
            ))

    def clear_window(self):
        """–û—á–∏—Å—Ç–∫–∞ –æ–∫–Ω–∞"""
        for widget in self.root.winfo_children():
            widget.destroy()

    def logout(self):
        """–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        self.current_user = None
        self.create_auth_interface()

    def login_user(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = simpledialog.askstring("–í—Ö–æ–¥", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", parent=self.root)
        
        if user and os.path.exists(os.path.join(self.accounts_dir, f"{user}.json")):
            self.current_user = user
            self.create_main_interface()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    def create_user(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = simpledialog.askstring("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", parent=self.root)
        
        if not user:
            return
            
        if os.path.exists(os.path.join(self.accounts_dir, f"{user}.json")):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ")
            return
            
        account = {
            "username": user,
            "games": {
                "snake": {"high_score": 0, "last_score": 0},
                "balls": {"high_score": 0, "last_score": 0},
                "letters": {"high_score": 0, "last_score": 0},
                "digits": {"high_score": 0, "last_score": 0}
            }
        }
        
        with open(os.path.join(self.accounts_dir, f"{user}.json"), 'w', encoding='utf-8') as f:
            json.dump(account, f, ensure_ascii=False, indent=4)
            
        self.current_user = user
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        self.create_main_interface()

    def update_score(self, game_name, new_score):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä–æ–∫–∞"""
        if not self.current_user:
            return
            
        account_path = os.path.join(self.accounts_dir, f"{self.current_user}.json")
        
        with open(account_path, 'r', encoding='utf-8') as f:
            account = json.load(f)
        
        game_stats = account["games"][game_name]
        
        if new_score > game_stats["high_score"]:
            game_stats["high_score"] = new_score
        game_stats["last_score"] = new_score
        
        with open(account_path, 'w', encoding='utf-8') as f:
            json.dump(account, f, ensure_ascii=False, indent=4)

if __name__ == "__main__":
    root = tk.Tk()
    try:
        app = GameCenter(root)
        root.mainloop()
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: {str(e)}")
        root.destroy()